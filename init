#!/bin/sh
set -f

log()
{
  echo "${1}"
}

log "Checking requirements..."
if [ -n $(which docker) ]; then
  log "> docker => installed"
else
  log "> docker => not installed"

  exit 1
fi

log "Preparing..."

DEFAULT_UID=$(id -u `whoami`)
DEFAULT_GID=$(id -g `whoami`)
DEFAULT_PORT=4000
DEFAULT_STORAGE_EASYEPG=$(cd ~ && pwd -P)"/easyepg"
DEFAULT_STORAGE_XML="${DEFAULT_STORAGE_EASYEPG}/xml"
DEFAULT_TIMEZONE=$(find /etc -type f -name "timezone" 2> /dev/null)
DEFAULT_LOCALTIME=$(find /etc -type l -name "localtime" 2> /dev/null)
NO_CPU_LIMIT=$(docker info 2>&1 | grep -E "No cpu cfs (quota|period)")

if [ -z "${NO_CPU_LIMIT}" ]; then
  DEFAULT_CPU_LIMIT=$(docker info 2>&1 | grep -E "^ *CPUs: " | sed "s/^ *CPUs: //")
fi

read -p "User ID [${DEFAULT_UID}]: " UID
read -p "Group ID [${DEFAULT_GID}]: " GID
read -p "Port [${DEFAULT_PORT}]: " PORT
read -p "Easyepg storage location [${DEFAULT_STORAGE_EASYEPG}]: " STORAGE_EASYEPG
read -p "XML storage location [${DEFAULT_STORAGE_XML}]: " STORAGE_XML
read -p "Timezone [${DEFAULT_TIMEZONE}]: " TIMEZONE
read -p "Localtime [${DEFAULT_LOCALTIME}]: " LOCALTIME

if [ -n "${DEFAULT_CPU_LIMIT}" ]; then
  while true; do
    read -p "Limit CPU usage [y/N]: " yn

    case ${yn} in
      [Yy]*)
        read -p "CPU limit [${DEFAULT_CPU_LIMIT}]: " CPU_LIMIT
        break
      ;;
      *)
        break
      ;;
    esac
  done
fi

if [ -z "${UID}" ]; then
  UID=${DEFAULT_UID}
fi

if [ -z "${GID}" ]; then
  GID=${DEFAULT_GID}
fi

if [ -z "${PORT}" ]; then
  PORT=${DEFAULT_PORT}
fi

if [ -z "${STORAGE_EASYEPG}" ]; then
  STORAGE_EASYEPG=${DEFAULT_STORAGE_EASYEPG}
fi

if [ -z "${STORAGE_XML}" ]; then
  STORAGE_XML=${DEFAULT_STORAGE_XML}
fi

if [ -z "${TIMEZONE}" ]; then
  TIMEZONE=${DEFAULT_TIMEZONE}
fi

if [ -z "${LOCALTIME}" ]; then
  LOCALTIME=${DEFAULT_LOCALTIME}
fi

if [ -z "${CPU_LIMIT}" ]; then
  CPU_LIMIT=${DEFAULT_CPU_LIMIT}
fi

if [ ! -d "${STORAGE_EASYEPG}" ]; then
  mkdir -p ${STORAGE_EASYEPG}
fi

if [ ! -d "${STORAGE_XML}" ]; then
  mkdir -p ${STORAGE_XML}
fi

if [ -z "${STORAGE_EASYEPG}" ] || [ ! -d "${STORAGE_EASYEPG}" ] || [ ! -w "${STORAGE_EASYEPG}" ]; then
  log "Easyepg storage location incorrect"
  exit 1
fi

if [ -z "${STORAGE_XML}" ] || [ ! -d "${STORAGE_XML}" ] || [ ! -w "${STORAGE_XML}" ]; then
  log "XML storage location incorrect"
  exit 1
fi

# make paths absolute for docker
STORAGE_EASYEPG=$(cd ${STORAGE_EASYEPG} && pwd -P)
STORAGE_XML=$(cd ${STORAGE_XML} && pwd -P)

log "Stopping container..."
docker ps --format "{{.Image}} {{.ID}}" | grep "qoopido/easyepg.minimal:lite-scratch" | cut -d " " -f 2 | xargs -I {} docker stop {} > /dev/null

log "Removing old container..."
docker ps -a --format "{{.Image}} {{.ID}}" | grep "qoopido/easyepg.minimal:lite-scratch" | cut -d " " -f 2 | xargs -I {} docker rm --force {} > /dev/null

log "Removing old image..."
docker images --format "{{.Repository}}:{{.Tag}}" | grep "qoopido/easyepg.minimal:lite-scratch" | xargs -I {} docker rmi --force {} > /dev/null

log "Pulling new image..."
docker pull qoopido/easyepg.minimal:lite-scratch

log "Creating new container..."
OPTIONS="--user=${UID}:${GID}"

if [ -n "${CPU_LIMIT}" ]; then
  OPTIONS="${OPTIONS} --cpus ${CPU_LIMIT}"
fi

OPTIONS="${OPTIONS} -p ${PORT}:4000"
OPTIONS="${OPTIONS} -v ${STORAGE_EASYEPG}:/storage"
OPTIONS="${OPTIONS} -v ${STORAGE_XML}:/storage/xml"

if [ -n "${TIMEZONE}" ]; then
  OPTIONS="${OPTIONS} -v ${TIMEZONE}:/etc/timezone:ro"
fi

if [ -n "${LOCALTIME}" ]; then
  OPTIONS="${OPTIONS} -v ${LOCALTIME}:/etc/localtime:ro"
fi

echo "docker create --label=easyepg.lite --name=easyepg.lite --net bridge --restart unless-stopped ${OPTIONS} qoopido/easyepg.minimal:lite-scratch"
sh -c "docker create --label=easyepg.lite --name=easyepg.lite --net bridge --restart unless-stopped ${OPTIONS} qoopido/easyepg.minimal:lite-scratch 1> /dev/null"
log "> easyepg.lite"

log "Finished!"

exit
