#!/bin/bash

while getopts ":t:m:n:" options; do
  case "${options}" in
    t)
      TAG="${OPTARG}"
    ;;
    n)
      TAGNEW="${OPTARG}"
    ;;
    m)
      MODE="${OPTARG}"
    ;;
  esac
done

if [[ -z "${TAG}" ]]; then
  TAG="latest"
fi

if [[ -z "${TAGNEW}" ]]; then
  TAGNEW="latest"
fi

COLOR_NOTICE='\e[95m'
COLOR_ERROR='\e[91m'
COLOR_NONE='\e[39m'

logDefault()
{
  echo -e "$1"
}

logNotice()
{
  echo -e "${COLOR_NOTICE}$1${COLOR_NONE}"
}

logError()
{
  echo -e "${COLOR_ERROR}$1${COLOR_NONE}" 1>&2
}

getLatestRelease() {
  curl --silent "https://api.github.com/repos/$1/releases/latest" | \
    grep '"tag_name":' | \
    sed -E 's/.*"([^"]+)".*/\1/'
}

build()
{
  logNotice "Getting latest release of \"multiarch/qemu-user-static\""

  LATEST=$(getLatestRelease multiarch/qemu-user-static)

  logDefault "> Latest release of \"multiarch/qemu-user-static\" is ${LATEST}"

  logNotice "Fetching \"multiarch/qemu-user-static\""

  for ARCH in aarch64 arm x86_64; do
    curl -sL https://github.com/multiarch/qemu-user-static/releases/download/${LATEST}/x86_64_qemu-${ARCH}-static.tar.gz | tar -C ./root -xf -

    logDefault "> fetched ${ARCH}"
  done

  logNotice "Creating Dockerfiles"

  for DOCKER_ARCH in amd64 arm32v7 arm64v8; do
    case ${DOCKER_ARCH} in
      amd64)
        QEMU_ARCH="x86_64"
        ;;
      arm32v7)
        QEMU_ARCH="arm"
        ;;
      arm64v8)
        QEMU_ARCH="aarch64"
        ;;
    esac

    cp Dockerfile.multi Dockerfile.${DOCKER_ARCH}

    sed -i "" "s|__BASE_ARCH__|${DOCKER_ARCH}|g" Dockerfile.${DOCKER_ARCH}
    sed -i "" "s|__QEMU_ARCH__|${QEMU_ARCH}|g" Dockerfile.${DOCKER_ARCH}

    if [[ ${DOCKER_ARCH} == 'amd64' ]]; then
      sed -i "" "/__CROSS_/d" Dockerfile.${DOCKER_ARCH}
    else
      sed -i "" "s/__CROSS_//g" Dockerfile.${DOCKER_ARCH}
    fi

    logDefault "> created Dockerfile.${DOCKER_ARCH}"
  done

  logNotice "Building images"

  for DOCKER_ARCH in amd64 arm32v7 arm64v8; do
    docker build --compress --no-cache --force-rm --squash -t qoopido/easyepg.minimal:${TAG}-${DOCKER_ARCH} -f Dockerfile.${DOCKER_ARCH} .

    logDefault "> built qoopido/easyepg.minimal:${TAG}-${DOCKER_ARCH}"
  done
}

tag() {
  for DOCKER_ARCH in amd64 arm32v7 arm64v8; do
    docker tag qoopido/easyepg.minimal:${TAG}-${DOCKER_ARCH} qoopido/easyepg.minimal:${TAGNEW}-${DOCKER_ARCH}

    logDefault "> tagged qoopido/easyepg.minimal:${TAG}-${DOCKER_ARCH} as qoopido/easyepg.minimal:${TAGNEW}-${DOCKER_ARCH}"
  done
}

publish() {
  logNotice "Publishing images"

  for DOCKER_ARCH in amd64 arm32v7 arm64v8; do
    docker push qoopido/easyepg.minimal:${TAG}-${DOCKER_ARCH}

    logDefault "> pushed qoopido/easyepg.minimal:${TAG}-${DOCKER_ARCH}"
  done

  logNotice "Processing manifest"

  docker manifest create qoopido/easyepg.minimal:${TAG} qoopido/easyepg.minimal:${TAG}-amd64 qoopido/easyepg.minimal:${TAG}-arm32v7 qoopido/easyepg.minimal:${TAG}-arm64v8

  logDefault "> created manifest"

  docker manifest annotate qoopido/easyepg.minimal:${TAG} qoopido/easyepg.minimal:${TAG}-arm32v7 --os linux --arch arm
  docker manifest annotate qoopido/easyepg.minimal:${TAG} qoopido/easyepg.minimal:${TAG}-arm64v8 --os linux --arch arm64 --variant armv8

  logDefault "> added annotations"

  docker manifest push qoopido/easyepg.minimal:${TAG} --purge

  logDefault "> pushed manifest"
}

case "${MODE}" in
  build)
    build
    ;;
  tag)
    tag
    ;;
  publish)
    publish
    ;;
  *)
    logError "Usage: easyepg.minimal -m [build|tag|publish]"
    logError "       -t: tag for the image"
    logError "           => used by [build|tag|publish], defaults to \"latest\""
    logError "       -n: new tag for the image"
    logError "           => used by [tag], defaults to \"latest\""
    exit 1
    ;;
esac

exit
